diff --git a/src/common/data/stores/app/homebase/homebaseTabsStore.ts b/src/common/data/stores/app/homebase/homebaseTabsStore.ts
index 137162b3..6b6c93f9 100644
--- a/src/common/data/stores/app/homebase/homebaseTabsStore.ts
+++ b/src/common/data/stores/app/homebase/homebaseTabsStore.ts
@@ -70,7 +70,7 @@ export const homeBaseStoreDefaults: HomeBaseTabStoreState = {
 const showTooltipError = (title: string, description: string) => {
   // Only run in browser environment
   if (typeof document === 'undefined' || typeof window === 'undefined') return;
-  
+
   // Create a simple error message element
   const errorContainer = document.createElement('div');
   errorContainer.style.position = 'fixed';
@@ -83,19 +83,15 @@ const showTooltipError = (title: string, description: string) => {
   errorContainer.style.borderRadius = '6px';
   errorContainer.style.boxShadow = '0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06)';
   errorContainer.style.maxWidth = '400px';
-  
   const titleElement = document.createElement('h3');
   titleElement.style.fontWeight = 'bold';
   titleElement.style.marginBottom = '4px';
   titleElement.textContent = title;
-  
   const descriptionElement = document.createElement('p');
   descriptionElement.textContent = description;
-  
   errorContainer.appendChild(titleElement);
   errorContainer.appendChild(descriptionElement);
   document.body.appendChild(errorContainer);
-  
   // Remove after timeout
   setTimeout(() => {
     document.body.removeChild(errorContainer);
@@ -120,7 +116,6 @@ export const createHomeBaseTabStoreFunc = (
     //   newOrder: newOrdering,
     //   commit
     // });
-    
     set((draft) => {
       draft.homebase.tabOrdering.local = newOrdering;
     }, "updateTabOrdering");
@@ -151,12 +146,10 @@ export const createHomeBaseTabStoreFunc = (
       const tabOrder = JSON.parse(
         await get().account.decryptEncryptedSignedFile(fileData),
       ) as string[];
-      
       // console.log('Loaded tab ordering:', {
       //   tabCount: tabOrder.length,
       //   tabs: tabOrder
       // });
-      
       set((draft) => {
         draft.homebase.tabOrdering = {
           local: clone(tabOrder),
@@ -176,7 +169,6 @@ export const createHomeBaseTabStoreFunc = (
       //   tabCount: localCopy.length,
       //   tabs: localCopy
       // });
-      
       const file = await get().account.createEncryptedSignedFile(
         stringify(localCopy),
         "json",
@@ -210,12 +202,10 @@ export const createHomeBaseTabStoreFunc = (
       } else {
         const currentTabs = get().homebase.tabs;
         const validTabNames = data.value || [];
-        
         // console.log('Loaded tab names:', {
         //   tabCount: validTabNames.length,
         //   tabs: validTabNames
         // });
-        
         set((draft) => {
           // Reset all tabs, this removes all ones that no longer exist
           draft.homebase.tabs = {};
@@ -311,21 +301,18 @@ export const createHomeBaseTabStoreFunc = (
         //   tabName,
         //   fidgetCount: Object.keys(initialConfig.fidgetInstanceDatums || {}).length
         // });
-        
+
         set((draft) => {
-          // Add the new tab to the tabs object
           draft.homebase.tabs[tabName] = {
             config: cloneDeep(initialConfig),
             remoteConfig: cloneDeep(initialConfig),
           };
 
-          // Add the new tab to the local tab order
           if (!draft.homebase.tabOrdering.local.includes(tabName)) {
             draft.homebase.tabOrdering.local.push(tabName);
           }
         }, "createHomebaseTab");
 
-        // Commit the new tab order to the database
         return get().homebase.commitTabOrderingToDatabase();
       }
     } catch (e) {
@@ -333,7 +320,6 @@ export const createHomeBaseTabStoreFunc = (
     }
   },
   async deleteTab(tabName) {
-    // console.log('Deleting tab:', { tabName });
     const publicKey = get().account.currentSpaceIdentityPublicKey;
     if (!publicKey) return;
     const req: UnsignedManageHomebaseTabsRequest = {
@@ -352,35 +338,28 @@ export const createHomeBaseTabStoreFunc = (
       );
       if (data.result === "success") {
         // console.log('Successfully deleted tab:', { tabName });
-        // Update both the tabs and ordering atomically
         set((draft) => {
-          // Remove from tabs object
           delete draft.homebase.tabs[tabName];
-          
-          // Remove from tab ordering and ensure it's a new array
           draft.homebase.tabOrdering.local = [...draft.homebase.tabOrdering.local]
             .filter(name => name !== tabName);
         }, "deleteHomebaseTab");
 
-        // Commit the updated tab order to the database
         await get().homebase.commitTabOrderingToDatabase();
       }
     } catch (e) {
       console.error('Failed to delete tab:', e);
-      throw e; // Propagate error to handler
+      throw e;
     }
   },
   async renameTab(tabName, newName) {
-    // console.log('Renaming tab:', { from: tabName, to: newName });
     const publicKey = get().account.currentSpaceIdentityPublicKey;
     if (!publicKey) return;
 
     if (/[^a-zA-Z0-9-_ ]/.test(newName)) {
       showTooltipError(
-        "Invalid Tab Name", 
+        "Invalid Tab Name",
         "The tab name contains invalid characters. Only letters, numbers, hyphens, underscores, and spaces are allowed."
       );
-      
       const error = new Error(
         "The tab name contains invalid characters. Only letters, numbers, hyphens, underscores, and spaces are allowed."
       );
@@ -440,13 +419,12 @@ export const createHomeBaseTabStoreFunc = (
       const spaceConfig = JSON.parse(
         await get().account.decryptEncryptedSignedFile(fileData),
       ) as SpaceConfig;
-      
+
       // console.log('Loaded homebase tab config:', {
       //   tabName,
       //   timestamp: spaceConfig.timestamp,
       //   fidgetCount: Object.keys(spaceConfig.fidgetInstanceDatums || {}).length
       // });
-      
       set((draft) => {
         draft.homebase.tabs[tabName].config = cloneDeep(spaceConfig);
         draft.homebase.tabs[tabName].remoteConfig = cloneDeep(spaceConfig);
@@ -465,53 +443,86 @@ export const createHomeBaseTabStoreFunc = (
       return cloneDeep(INITIAL_HOMEBASE_CONFIG);
     }
   },
-  commitHomebaseTabToDatabase: debounce(async (tabname) => {
-    // console.log('Committing tab to database:', { tabname });
+
+  commitHomebaseTabToDatabase: debounce(async (tabname, immediate = false) => {
     const tab = get().homebase.tabs[tabname];
     if (tab && tab.config) {
       const localCopy = cloneDeep(tab.config);
-      
-      // console.log('Tab config to commit:', {
-      //   tabname,
-      //   timestamp: localCopy.timestamp,
-      //   fidgetCount: Object.keys(localCopy.fidgetInstanceDatums || {}).length
-      // });
-      
-      const file = await get().account.createEncryptedSignedFile(
-        stringify(localCopy),
-        "json",
-        { useRootKey: true, fileName: tabname },
-      );
+
+      // console.log(`Commit tab ${tabname} to database:`, { 
+      //   timestamp: localCopy.timestamp, 
+      //   fidgetCount: Object.keys(localCopy.fidgetInstanceDatums || {}).length, 
+      //   immediate 
+      //   });
       try {
+        const file = await get().account.createEncryptedSignedFile(
+          stringify(localCopy),
+          "json",
+          { useRootKey: true, fileName: tabname },
+        );
+
         await axiosBackend.post(`/api/space/homebase/tabs/${tabname}`, file);
+
         set((draft) => {
-          draft.homebase.tabs[tabname].remoteConfig = localCopy;
+          draft.homebase.tabs[tabname].remoteConfig = cloneDeep(localCopy);
         }, "commitHomebaseToDatabase");
+
+        console.log(`Tab ${tabname} saved successfully`);
       } catch (e) {
-        console.error('Failed to commit tab:', e);
+        console.error('Failed to save tab:', e);
+        showTooltipError(
+          "Save Failed",
+          "Changes could not be saved to the server. Please try again."
+        );
         throw e;
       }
     }
-  }, 1000),
+  }, 500, { leading: false, trailing: true }),
+
   async saveHomebaseTabConfig(tabName, config) {
-    const localCopy = cloneDeep(
-      get().homebase.tabs[tabName].config,
-    ) as SpaceConfig;
-    mergeWith(localCopy, config, (objValue, srcValue) => {
-      if (isArray(srcValue)) return srcValue;
-      if (typeof srcValue === 'object' && srcValue !== null) {
-        // For objects, return the source value to replace the target completely
-        return srcValue;
+    try {
+      const localCopy = cloneDeep(
+        get().homebase.tabs[tabName].config,
+      ) as SpaceConfig;
+
+      mergeWith(localCopy, config, (objValue, srcValue) => {
+        if (isArray(srcValue)) return srcValue;
+        if (typeof srcValue === 'object' && srcValue !== null) {
+           // For objects, return the source value to replace the target completely
+          return srcValue;
+        }
+      });
+
+      set(
+        (draft) => {
+          draft.homebase.tabs[tabName].config = localCopy;
+        },
+        `saveHomebaseTab:${tabName}`,
+        false,
+      );
+
+      const shouldSaveImmediately =
+        config.fidgetInstanceDatums !== undefined ||
+        (config as any).layoutConfig?.layout !== undefined;
+
+      const isExplicitSave = (config as any).forceSave === true;
+
+
+      if (shouldSaveImmediately || isExplicitSave) {
+        const commitFunc = get().homebase.commitHomebaseTabToDatabase;
+        return commitFunc(tabName);
+      } else {
+        return get().homebase.commitHomebaseTabToDatabase(tabName);
       }
-    });
-    set(
-      (draft) => {
-        draft.homebase.tabs[tabName].config = localCopy;
-      },
-      `saveHomebaseTab:${tabName}`,
-      false,
-    );
+    } catch (error) {
+      console.error(`Error saving homebase tab config for ${tabName}:`, error);
+      showTooltipError(
+        "Error Saving Layout",
+        "Failed to save your changes. Please try again."
+      );
+    }
   },
+
   async resetHomebaseTabConfig(tabName) {
     // console.log('Resetting tab config:', { tabName });
     const currentTabInfo = get().homebase.tabs[tabName];
diff --git a/src/fidgets/farcaster/Feed.tsx b/src/fidgets/farcaster/Feed.tsx
index 713317ac..a5a4baba 100644
--- a/src/fidgets/farcaster/Feed.tsx
+++ b/src/fidgets/farcaster/Feed.tsx
@@ -19,13 +19,13 @@ import {
   type FidgetSettingsStyle,
 } from "@/common/fidgets";
 import useLifoQueue from "@/common/lib/hooks/useLifoQueue";
-import { mobileStyleSettings } from "../helpers";
 import { FeedType } from "@neynar/nodejs-sdk/build/api";
 import { isNil } from "lodash";
 import React, { useCallback, useEffect, useState } from "react";
 import { BsChatRightHeart, BsChatRightHeartFill } from "react-icons/bs";
 import { useInView } from "react-intersection-observer";
 import { useFarcasterSigner } from ".";
+import { mobileStyleSettings } from "../helpers";
 import { CastRow } from "./components/CastRow";
 import { CastThreadView } from "./components/CastThreadView";
 
diff --git a/src/fidgets/layout/Grid.tsx b/src/fidgets/layout/Grid.tsx
index 74d0c416..b6cc6479 100644
--- a/src/fidgets/layout/Grid.tsx
+++ b/src/fidgets/layout/Grid.tsx
@@ -33,6 +33,7 @@ import {
 import AddFidgetIcon from "@/common/components/atoms/icons/AddFidget";
 import FidgetSettingsEditor from "@/common/components/organisms/FidgetSettingsEditor";
 import { debounce } from "lodash";
+import { useQuery } from "@tanstack/react-query";
 
 export const resizeDirections = ["s", "w", "e", "n", "sw", "nw", "se", "ne"];
 export type ResizeDirection = (typeof resizeDirections)[number];
@@ -158,54 +159,115 @@ const Grid: LayoutFidget<GridLayoutProps> = ({
     [hasProfile, hasFeed],
   );
 
+  const updateLocalStateAfterSave = useCallback(
+    (newConfig: Partial<{
+      layoutConfig: { layout: PlacedGridItem[] };
+      fidgetTrayContents: typeof fidgetTrayContents;
+      fidgetInstanceDatums: typeof fidgetInstanceDatums;
+      theme: typeof theme;
+    }>) => {
+      console.log(`Updating local state in tab ${fid || 'unknown'}:`, newConfig);
+
+      if (newConfig.layoutConfig?.layout) {
+        layoutConfig.layout = [...newConfig.layoutConfig.layout];
+      }
+
+      if (newConfig.fidgetTrayContents) {
+        fidgetTrayContents = [...newConfig.fidgetTrayContents];
+      }
+
+      if (newConfig.fidgetInstanceDatums) {
+        // Create a new one object instead of manipulating the existing one
+        const newDatums = { ...newConfig.fidgetInstanceDatums };
+        // Clear the original object
+        Object.keys(fidgetInstanceDatums).forEach(key => {
+          delete fidgetInstanceDatums[key];
+        });
+        // Add the new properties
+        Object.keys(newDatums).forEach(key => {
+          fidgetInstanceDatums[key] = newDatums[key];
+        });
+      }
+
+      if (newConfig.theme) {
+        // Update theme immutably
+        const newTheme = { ...newConfig.theme };
+        Object.keys(theme).forEach(key => {
+          delete theme[key];
+        }); Object.keys(newTheme).forEach(key => {
+          theme[key] = newTheme[key];
+        });
+      }
+    },
+    [layoutConfig, fidgetTrayContents, fidgetInstanceDatums, theme, fid]
+  );
+
   const saveTrayContents = async (newTrayData: typeof fidgetTrayContents) => {
-    return await saveConfig({
+    const result = await saveConfig({
       fidgetTrayContents: newTrayData,
     });
+    updateLocalStateAfterSave({ fidgetTrayContents: newTrayData });
+    return result;
   };
 
   const saveFidgetInstanceDatums = async (
     datums: typeof fidgetInstanceDatums,
   ) => {
-    return await saveConfig({
+    const result = await saveConfig({
       fidgetInstanceDatums: datums,
     });
+    updateLocalStateAfterSave({ fidgetInstanceDatums: datums });
+    return result;
   };
 
   const saveTheme = async (newTheme: typeof theme) => {
-    return await saveConfig({
+    const result = await saveConfig({
       theme: newTheme,
     });
+    updateLocalStateAfterSave({ theme: newTheme });
+    return result;
   };
 
   const saveLayout = async (newLayout: PlacedGridItem[]) => {
-    return await saveConfig({
-      layoutConfig: {
-        layout: newLayout,
-      },
-    });
+    try {
+      const result = await saveConfig({
+        layoutConfig: {
+          layout: newLayout,
+        },
+      });
+      updateLocalStateAfterSave({
+        layoutConfig: { layout: newLayout }
+      });
+      return result;
+    } catch (error) {
+      console.error(`Error saving layout in tab ${fid || 'unknown'}:`, error);
+      toast.error("Error saving layout!");
+    }
   };
 
   const saveFidgetConfig = useCallback(
     (id: string) => async (newInstanceConfig: FidgetConfig<FidgetSettings>) => {
-      return await saveFidgetInstanceDatums({
+      const result = await saveFidgetInstanceDatums({
         ...fidgetInstanceDatums,
         [id]: {
           ...fidgetInstanceDatums[id],
           config: newInstanceConfig,
         },
       });
+      return result;
     },
     [fidgetInstanceDatums, saveFidgetInstanceDatums],
   );
 
-  // Debounced save function
-  const debouncedSaveConfig = useCallback(
-    debounce((config) => {
-      saveConfig(config);
-    }, 100),
-    [saveConfig]
-  );
+  // // Debounced save function
+  // const debouncedSaveConfig = useCallback(
+  //   debounce((config) => {
+  //     saveConfig(config).then(() => {
+  //       updateLocalStateAfterSave(config);
+  //     });
+  //   }, 100),
+  //   [saveConfig, updateLocalStateAfterSave]
+  // );
 
   function unselectFidget() {
     setSelectedFidgetID("");
@@ -231,6 +293,8 @@ const Grid: LayoutFidget<GridLayoutProps> = ({
           ...bundle.config,
           settings: newSettings,
         });
+
+        toast.success("Fidget saved successfully!");
       } catch (e) {
         toast.error("Failed to save fidget settings", { duration: 1000 });
       }
@@ -260,10 +324,10 @@ const Grid: LayoutFidget<GridLayoutProps> = ({
     const magicBase = hasProfile ? 64 + 160 : 64;
     return height
       ? (height -
-          magicBase -
-          gridDetails.margin[0] * (gridDetails.maxRows - 1) -
-          gridDetails.containerPadding[0] * 2) /
-          gridDetails.maxRows
+        magicBase -
+        gridDetails.margin[0] * (gridDetails.maxRows - 1) -
+        gridDetails.containerPadding[0] * 2) /
+      gridDetails.maxRows
       : gridDetails.rowHeight;
   }, [height, hasProfile]);
 
@@ -326,12 +390,12 @@ const Grid: LayoutFidget<GridLayoutProps> = ({
     saveLayout(newLayout);
   }
 
-  function removeFidgetFromInstanceDatums(fidgetId: string){
-      // New set of instances - use computed property name to remove the correct fidget
-      const { [fidgetId]: removed, ...newFidgetInstanceDatums } = fidgetInstanceDatums;
+  // function removeFidgetFromInstanceDatums(fidgetId: string) {
+  //   // New set of instances - use computed property name to remove the correct fidget
+  //   const { [fidgetId]: removed, ...newFidgetInstanceDatums } = fidgetInstanceDatums;
 
-      saveFidgetInstanceDatums(newFidgetInstanceDatums);
-  }
+  //   saveFidgetInstanceDatums(newFidgetInstanceDatums);
+  // }
 
   function removeFidget(fidgetId: string) {
     unselectFidget();
@@ -340,16 +404,30 @@ const Grid: LayoutFidget<GridLayoutProps> = ({
     const newLayout = layoutConfig.layout.filter(item => item.i !== fidgetId);
     const newTrayContents = fidgetTrayContents.filter(fidget => fidget.id !== fidgetId);
     const { [fidgetId]: removed, ...newFidgetInstanceDatums } = fidgetInstanceDatums;
-    
-    console.log("newFidgetInstanceDatums", newFidgetInstanceDatums);
-    // Only save if we have fidgets left or if we're removing the last one
-    if (Object.keys(newFidgetInstanceDatums).length > 0 || newLayout.length === 0) {
-      debouncedSaveConfig({
-        layoutConfig: { layout: newLayout },
-        fidgetTrayContents: newTrayContents,
-        fidgetInstanceDatums: newFidgetInstanceDatums
-      });
-    }
+
+    // Update local state immediately
+    updateLocalStateAfterSave({
+      layoutConfig: { layout: newLayout },
+      fidgetTrayContents: newTrayContents,
+      fidgetInstanceDatums: newFidgetInstanceDatums
+    });
+    // Save without debouncing to ensure immediate persistence
+    return saveConfig({
+      layoutConfig: { layout: newLayout },
+      fidgetTrayContents: newTrayContents,
+      fidgetInstanceDatums: newFidgetInstanceDatums
+    }).then((result) => {
+      if (result !== undefined && result !== null) {
+        console.log(`Fidget ${fidgetId} successfully removed in tab ${fid}`);
+        toast.success("Fidget successfully removed");
+      } else {
+        console.warn(`Possible problem removing fidget ${fidgetId} in tab ${fid}`);
+      }
+      return result;
+    }).catch((error) => {
+      console.error(`Error removing fidget ${fidgetId} in tab ${fid}:`, error);
+      toast.error("Error removing fidget");
+    });
   }
 
   function moveFidgetFromGridToTray(fidgetId: string) {
@@ -371,74 +449,127 @@ const Grid: LayoutFidget<GridLayoutProps> = ({
       inEditMode &&
       newLayout.length === layoutConfig.layout.length
     ) {
-      debouncedSaveConfig({
-        layoutConfig: { layout: newLayout }
-      });
+
+      const hasChanged = JSON.stringify(newLayout) !== JSON.stringify(layoutConfig.layout);
+
+      if (hasChanged) {
+        updateLocalStateAfterSave({
+          layoutConfig: { layout: newLayout }
+        });
+        saveLayout(newLayout).then((result) => {
+          if (result !== undefined && result !== null) {
+            console.log(`Layout saved successfully in tab ${fid}`);
+          } else {
+            console.warn(`Possible problem saving layout in tab ${fid}`);
+          }
+        }).catch((error) => {
+          console.error(`Error saving layout in tab ${fid}:`, error);
+        });
+      }
     }
   }
 
   /**
-   * Adds a given fidget to the grid by finding the first available space based on its minimum size.
-   * If no space is available, returns false. Otherwise, returns true.
-   */
+  * Adds a given fidget to the grid by finding the first available space based on its minimum size.
+  * If no space is available, returns false. Otherwise, returns true.
+  */
   const addFidgetToGrid = (fidget: FidgetBundle): boolean => {
-    const { fidgetType, id } = fidget;
-    const fidgetProps = CompleteFidgets[fidgetType].properties;
-    const minW = fidgetProps.size.minWidth;
-    const minH = fidgetProps.size.minHeight;
-
-    const isSpaceAvailable = (
-      x: number,
-      y: number,
-      w: number,
-      h: number,
-    ): boolean => {
-      for (const item of layoutConfig.layout) {
-        if (
-          x < item.x + item.w &&
-          x + w > item.x &&
-          y < item.y + item.h &&
-          y + h > item.y
-        ) {
-          return false;
+    try {
+      const { fidgetType, id } = fidget;
+      const fidgetProps = CompleteFidgets[fidgetType].properties;
+      const minW = fidgetProps.size.minWidth;
+      const minH = fidgetProps.size.minHeight;
+
+      const currentLayout = [...layoutConfig.layout];
+
+      const isSpaceAvailable = (
+        x: number,
+        y: number,
+        w: number,
+        h: number,
+        layout: PlacedGridItem[]
+      ): boolean => {
+        for (const item of layout) {
+          if (
+            x < item.x + item.w &&
+            x + w > item.x &&
+            y < item.y + item.h &&
+            y + h > item.y
+          ) {
+            return false;
+          }
+        }
+        return true;
+      };
+
+      let positionX = -1;
+      let positionY = -1;
+
+      outerLoop: for (let y = 0; y <= gridDetails.maxRows - minH; y++) {
+        for (let x = 0; x <= gridDetails.cols - minW; x++) {
+          if (isSpaceAvailable(x, y, minW, minH, currentLayout)) {
+            positionX = x;
+            positionY = y;
+            break outerLoop;
+          }
         }
       }
-      return true;
-    };
 
-    // Search for available space
-    for (let x = 0; x <= gridDetails.cols - minW; x++) {
-      for (let y = 0; y <= gridDetails.maxRows - minH; y++) {
-        if (isSpaceAvailable(x, y, minW, minH)) {
-          const newItem: PlacedGridItem = {
-            i: id,
-            x,
-            y,
-            w: minW,
-            h: minH,
-            minW,
-            minH,
-            maxW: fidgetProps.size.maxWidth,
-            maxH: fidgetProps.size.maxHeight,
-            resizeHandles: resizeDirections,
-            isBounded: false,
-          };
-
-          // Save both layout and fidgetInstanceDatums in a single operation
-          debouncedSaveConfig({
-            layoutConfig: { layout: [...layoutConfig.layout, newItem] },
-            fidgetInstanceDatums: { ...fidgetInstanceDatums, [id]: fidget }
-          });
+      if (positionX === -1 || positionY === -1) {
+        toast.error("There is no space available to add this fidget");
+        return false;
+      }
+
+      const newItem: PlacedGridItem = {
+        i: id,
+        x: positionX,
+        y: positionY,
+        w: minW,
+        h: minH,
+        minW,
+        minH,
+        maxW: fidgetProps.size.maxWidth,
+        maxH: fidgetProps.size.maxHeight,
+        resizeHandles: resizeDirections,
+        isBounded: false,
+      };
+
+      const newLayout = [...currentLayout, newItem];
+      const newInstanceDatums = {
+        ...fidgetInstanceDatums,
+        [id]: fidget
+      };
+
+      updateLocalStateAfterSave({
+        layoutConfig: { layout: newLayout },
+        fidgetInstanceDatums: newInstanceDatums
+      });
+
+      saveConfig({
+        layoutConfig: { layout: newLayout },
+        fidgetInstanceDatums: newInstanceDatums
+      }).then((result) => {
+        if (result !== undefined && result !== null) {
+          console.log(`Fidget ${id} successfully added to tab ${fid || 'unknown'}`);
 
           analytics.track(AnalyticsEvent.ADD_FIDGET, {
             fidgetType: fidget.fidgetType,
           });
-          return true;
+        } else {
+          console.warn(`Possible problem adding fidget ${id} to tab ${fid || 'unknown'}`);
+          toast.error("Error saving fidget. Positions may not be preserved.");
         }
-      }
-    }
+      }).catch((error) => {
+        console.error(`Error adding fidget to tab ${fid || 'unknown'}:`, error);
+        toast.error("Error adding fidget");
+      });
 
-    return false;
+      return true;
+    } catch (error) {
+      console.error(`Error adding fidget to tab ${fid || 'unknown'}:`, error);
+      toast.error("Error adding fidget");
+      return false;
+    }
   };
 
   function editorPanelPortal(portalNode: HTMLDivElement | null) {
@@ -544,11 +675,10 @@ const Grid: LayoutFidget<GridLayoutProps> = ({
               return (
                 <div
                   key={gridItem.i}
-                  className={`grid-item ${
-                    selectedFidgetID === gridItem.i
-                      ? "outline outline-4 outline-offset-1 rounded-2xl outline-sky-600"
-                      : ""
-                  }`}
+                  className={`grid-item ${selectedFidgetID === gridItem.i
+                    ? "outline outline-4 outline-offset-1 rounded-2xl outline-sky-600"
+                    : ""
+                    }`}
                 >
                   <FidgetWrapper
                     fidget={fidgetModule.fidget}
